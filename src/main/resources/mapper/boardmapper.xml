<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board.mapper.BoardMapper">

    <!-- BOARD -->
<!--    <insert id="saveBoard" parameterType="board.entity.Board" useGeneratedKeys="true" keyProperty="id">-->
    <insert id="saveBoard" parameterType="board.entity.Board">
        insert into board
            (
             member_id,
             title,
             content
            )
        values (#{memberId}, #{title}, #{content});
    </insert>

    <update id="updateBoard" parameterType="board.entity.Board">
        update board
        set title = #{title}, content = #{content}
        where id = #{id}
    </update>

    <update id="updateViewCountBoard" parameterType="board.entity.Board">
        update board
        set view_count = #{viewCount}, updated_at = #{updatedAt}
        where id = #{id}
    </update>

    <update id="updateCommentCountBoard" parameterType="board.entity.Board">
        update board
        set comment_count = #{commentCount}, updated_at = #{updatedAt}
        where id = #{id}
    </update>

    <update id="updateLikesCountBoard">
        update board
        set likes_count = #{likesCount}
        where id = #{id}
    </update>

    <select id="findAllByMemberId" parameterType="java.lang.Long" resultType="board.entity.Board">
        select id,
               member_id,
               title,
               content,
               view_count,
               comment_count,
               likes_count,
               created_at,
               updated_at,
               is_deleted
        from board
        where member_id = #{memberId}
    </select>

    <!-- ANSI -->
    <select id="getBoardById" parameterType="java.lang.Long" resultType="board.mapper.resultset.BoardResultSet">
        select B.id,
               B.title,
               B.content,
               M.username as author,
               B.view_count,
               B.comment_count,
               B.likes_count,
               B.created_at,
               B.updated_at
        from board B inner join member M
        on B.member_id = M.id
        where B.id = #{id} and is_deleted = 0
    </select>

    <select id="findBoardById" resultType="board.entity.Board">
        select id,
               member_id,
               title,
               content,
               view_count,
               comment_count,
               likes_count,
               created_at,
               updated_at,
               is_deleted
        from board
        where id = #{id} and is_deleted = 0
    </select>

    <select id="getAllBoard" resultType="board.mapper.resultset.BoardResultSet">
        select B.id,
               B.title,
               B.content,
               M.username as author,
               B.view_count,
               B.comment_count,
               B.likes_count,
               B.created_at,
               B.updated_at
        from board B inner join member M
        on B.member_id = M.id
        where B.is_deleted = 0
        limit #{limit} offset #{offset}
    </select>

    <delete id="deleteBoardById" parameterType="java.lang.Long">
        update board set is_deleted = 1 where id = #{id}
    </delete>

    <!-- COMMENT -->
    <insert id="saveCommentBoard" parameterType="board.entity.Comment">
        insert into comment
        (
         member_id,
         board_id,
         content
        )
        values (#{memberId}, #{boardId}, #{content})
    </insert>

    <select id="findCommentById" resultType="board.entity.Comment">
        select id,
               member_id,
               board_id,
               content,
               created_at,
               is_deleted
        from comment
        where id = #{id} and is_deleted = 0;
    </select>

    <select id="countCommentByBoardId" parameterType="java.lang.Long" resultType="java.lang.Integer">
        select count(board_id) from comment where board_id = #{boardId} and is_deleted = 0;
    </select>

    <delete id="deleteCommentBoardById" parameterType="java.lang.Long">
        update comment set is_deleted = 1 where id = #{id} and board_id = #{boardId}
    </delete>

    <delete id="deleteCommentBoardAllByBoardId" parameterType="java.lang.Long">
        update comment set is_deleted = 1 where board_id = #{boardId}
    </delete>

    <select id="findBoardByTypeAndKeyword" resultType="board.mapper.resultset.BoardResultSet">
        select B.id,
               B.title,
               B.content,
               M.username as author,
               B.view_count,
               B.comment_count,
               B.created_at,
               B.updated_at
        from board B inner join member M
                               on B.member_id = M.id
        <where>
            <choose>
                <when test="type == 'username'">
                    and M.username like concat('%', #{keyword}, '%')
                </when>
                <when test="type == 'title'">
                    and B.title like concat('%', #{keyword}, '%')
                </when>
                <when test="type == 'content'">
                    and B.content like concat('%', #{keyword}, '%')
                </when>
                <otherwise>
                    and 1 = 0
                </otherwise>
            </choose>
            and B.is_deleted = 0
        </where>
    </select>

    <select id="findAllCommentByBoardId" resultType="board.mapper.resultset.CommentListResultSet">
        select C.id,
               M.username as username,
               C.content,
               C.created_at
        from comment C
                 inner join member M
                            on C.member_id = M.id
        where board_id = #{boardId}
          and is_deleted = 0
    </select>

    <insert id="saveLikesBoard" parameterType="board.entity.Likes">
        insert into likes
        (
         member_id,
         board_id
        )
        values (#{memberId}, #{boardId})
    </insert>

    <select id="findLikesByMemberIdAndBoardId" resultType="board.entity.Likes">
        select member_id, board_id
        from likes
        where member_id = #{memberId} and board_id = #{boardId}
    </select>

    <delete id="deleteLikesBoard" parameterType="board.entity.Likes">
        delete from likes
        where member_id = #{memberId} and board_id = #{boardId}
    </delete>

</mapper>